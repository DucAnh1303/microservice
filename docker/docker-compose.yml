version: '3.8'
services:
  mysql:
    image: mysql
    container_name: my-sql
    environment:
      MYSQL_DATABASE: microservice
      MYSQL_ROOT_PASSWORD: 123456789
    ports:
      - "13306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
#  postgres:
#    image: postgres:latest
#    container_name: postgres-sql
#    environment:
#      POSTGRES_USER: root
#      POSTGRES_PASSWORD: 123456789
#      POSTGRES_DB: microservice
#    ports:
#      - "5432:5432"
#    volumes:
#      - postgres_data:/var/lib/postgresql/data

#  axon-server:
#    image: axoniq/axonserver:latest
#    container_name: axon-server
#    hostname: axonserver
#    ports:
#      - "8024:8024"   # gRPC port
#      - "8124:8124"   # HTTP port
#    volumes:
#      - axonserver-data:/data
#      - axonserver-events:/eventdata
#      - axonserver-config:/config:ro
#    networks:
#      - axon-network

#  zookeeper:
#    image: confluentinc/cp-zookeeper:7.4.4
#    container_name: zookeeper
#    ports:
#      - "2181:2181"
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
#    volumes:
#      - zookeeper_data:/var/lib/zookeeper/data
#      - zookeeper_log:/var/lib/zookeeper/log
#
#  kafka:
#    image: confluentinc/cp-kafka:7.4.4
#    container_name: kafka
#    ports:
#      - "9092:9092"
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
#      KAFKA_LISTENER_NAME_PLAINTEXT_LISTENER: PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#    depends_on:
#      - zookeeper
#    volumes:
#      - kafka_data:/var/lib/kafka/data
#      - kafka_log:/var/lib/kafka/log

#  redis:
#    image: redis:latest
#    container_name: redis
#    command: redis-server /usr/local/etc/redis/redis.conf
#    volumes:
#      - redis.conf:/usr/local/etc/redis/redis.conf
#    ports:
#      - "16379:6379"

  #  docker exec -it elasticsearch bin/elasticsearch-reset-password -u elastic reset password elasticsearch
#  elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
#    container_name: elasticsearch
#    environment:
#      - node.name=elasticsearch-node
#      - cluster.name=docker-cluster
#      - discovery.type=single-node
#      - bootstrap.memory_lock=false
#      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
#      - xpack.security.enabled=false
#      - xpack.security.enrollment.enabled=false
#      - xpack.security.transport.ssl.enabled=false
#      - xpack.security.http.ssl.enabled=false
#    #      - xpack.security.http.ssl.keystore.path=certs/http.12
#    #      - xpack.security.transport.ssl.verification_mode= certificate
#    #      - xpack.security.transport.ssl.keystore.path=certs/transport.12
#    #      - xpack.security.transport.ssl.truststore.path=certs/transport.12
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
#    volumes:
#      - elasticsearch_data:/usr/share/elasticsearch/data
#    ports:
#      - "9200:9200"
#      - "9300:9300"
#    networks:
#      - elastic

#  kibana:
#    image: docker.elastic.co/kibana/kibana:8.9.0
#    container_name: kibana
#    environment:
#      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
#    ports:
#      - "5601:5601"
#    depends_on:
#      - elasticsearch
#    networks:
#      - elastic

networks:
  axon-network:
    driver: bridge
  myNetwork:
    driver: bridge
  elastic:
    driver: bridge

volumes:
  axonserver-data:
  axonserver-events:
  axonserver-config:
  mysql-data:
  redis.conf:
  postgres_data:
  elasticsearch_data:
  kafka_data:
  kafka_log:
  zookeeper_data:
  zookeeper_log:
